{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Draggable, guid, classNames, focusFirstFocusableChild, getTabIndex } from '@progress/kendo-react-common';\nimport { Slider } from './../main';\nimport { fitIntoBounds, isPresent } from './utils/misc';\nimport { getColorFromHue, parseColor, getHSV, getColorFromHSV, getRGBA, getColorFromRGBA } from './utils/color-parser';\nimport { cacheHsva, removeCachedColor, getCachedHsva, getCachedRgba, getCachedHex, cacheRgba, cacheHex } from './utils/color-cache';\nimport ColorInput from './ColorInput';\nvar FORMAT = 'rgba';\nvar DEFAULT_SELECTED_COLOR = 'rgba(255, 255, 255, 1)';\n/**\n * Represents the [KendoReact ColorGradient component]({% slug overview_colorgradient %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     render() {\n *         return <ColorGradient />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar ColorGradient =\n/** @class */\nfunction (_super) {\n  __extends(ColorGradient, _super);\n\n  function ColorGradient(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.onHexChange = function (hex, value, event) {\n      if (_this.isUncontrolled) {\n        var hsva = getHSV(value);\n\n        _this.setState({\n          hsva: hsva,\n          backgroundColor: getColorFromHue(hsva.h),\n          rgba: getRGBA(value),\n          hex: hex\n        });\n      } else {\n        cacheHex(_this.state.guid, value, hex);\n      }\n\n      _this.dispatchChangeEvent(value, event, event.nativeEvent);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onRgbaChange = function (rgba, event) {\n      var value = getColorFromRGBA(rgba);\n\n      if (_this.isUncontrolled) {\n        var hsva = getHSV(value);\n        var hex = parseColor(value, 'hex');\n\n        _this.setState({\n          hsva: hsva,\n          backgroundColor: getColorFromHue(hsva.h),\n          rgba: rgba,\n          hex: hex\n        });\n      } else {\n        cacheRgba(_this.state.guid, value, rgba);\n      }\n\n      _this.dispatchChangeEvent(value, event.syntheticEvent, event.nativeEvent);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onAlphaSliderChange = function (event) {\n      _this.handleHsvaChange(Object.assign({}, _this.state.hsva, {\n        a: event.value / 100\n      }), event.syntheticEvent, event.nativeEvent);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onHueSliderChange = function (event) {\n      _this.handleHsvaChange(Object.assign({}, _this.state.hsva, {\n        h: event.value\n      }), event.syntheticEvent, event.nativeEvent);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onDrag = function (e) {\n      _this.gradientWrapper.classList.add('k-dragging');\n\n      _this.changePosition(e.event);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onRelease = function () {\n      _this.gradientWrapper.classList.remove('k-dragging');\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onGradientWrapperClick = function (event) {\n      _this.changePosition(event);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.changePosition = function (event) {\n      var gradientRectMetrics = _this.getGradientRectMetrics();\n\n      var deltaX = event.clientX - gradientRectMetrics.left;\n      var deltaY = event.clientY - gradientRectMetrics.top;\n      var left = fitIntoBounds(deltaX, 0, gradientRectMetrics.width);\n      var top = fitIntoBounds(deltaY, 0, gradientRectMetrics.height);\n      var hsva = Object.assign({}, _this.state.hsva, {\n        s: left / gradientRectMetrics.width,\n        v: 1 - top / gradientRectMetrics.height\n      });\n\n      _this.handleHsvaChange(hsva, event, event.nativeEvent);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.focus = function () {\n      focusFirstFocusableChild(_this.wrapper);\n    };\n\n    var value = props.value || props.defaultValue || parseColor(DEFAULT_SELECTED_COLOR, FORMAT);\n    _this.state = Object.assign({}, ColorGradient.getStateFromValue(value), {\n      isFirstRender: true,\n      guid: guid()\n    });\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.getDerivedStateFromProps = function (props, state) {\n    if (props.value && !state.isFirstRender) {\n      // The component is in controlled mode.\n      return ColorGradient.getStateFromValue(props.value, state.guid);\n    }\n\n    return null;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.componentDidMount = function () {\n    this.setAlphaSliderBackground(this.state.backgroundColor);\n\n    if (this.state.isFirstRender) {\n      this.setState({\n        isFirstRender: false\n      });\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.componentWillUnmount = function () {\n    removeCachedColor(this.state.guid);\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.componentDidUpdate = function (_, prevState) {\n    if (prevState.backgroundColor !== this.state.backgroundColor) {\n      this.setAlphaSliderBackground(this.state.backgroundColor);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.renderRectangleDragHandle = function () {\n    var style = {};\n\n    if (!this.state.isFirstRender) {\n      var gradientRectMetrics = this.getGradientRectMetrics();\n      var top_1 = (1 - this.state.hsva.v) * gradientRectMetrics.height;\n      var left = this.state.hsva.s * gradientRectMetrics.width;\n      style.top = top_1 + \"px\";\n      style.left = left + \"px\";\n    }\n\n    return React.createElement(\"div\", {\n      className: \"k-draghandle\",\n      style: style\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.handleHsvaChange = function (hsva, syntheticEvent, nativeEvent) {\n    var value = getColorFromHSV(hsva);\n\n    if (this.isUncontrolled) {\n      var hex = parseColor(value, 'hex');\n      this.setState({\n        hsva: hsva,\n        backgroundColor: getColorFromHue(hsva.h),\n        rgba: getRGBA(value),\n        hex: hex\n      });\n    } else {\n      cacheHsva(this.state.guid, value, hsva);\n    }\n\n    this.dispatchChangeEvent(value, syntheticEvent, nativeEvent);\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.dispatchChangeEvent = function (value, syntheticEvent, nativeEvent) {\n    if (this.props.onChange) {\n      this.props.onChange.call(undefined, {\n        syntheticEvent: syntheticEvent,\n        nativeEvent: nativeEvent,\n        target: this,\n        value: value\n      });\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.getStateFromValue = function (value, componentGuid) {\n    if (!isPresent(parseColor(value, 'hex'))) {\n      // Validate/sanitize the input.\n      value = DEFAULT_SELECTED_COLOR;\n    }\n\n    var hsva = getCachedHsva(componentGuid, value) || getHSV(value);\n    var rgba = getCachedRgba(componentGuid, value) || getRGBA(value);\n    var hex = getCachedHex(componentGuid, value) || parseColor(value, 'hex');\n    return {\n      hsva: hsva,\n      backgroundColor: getColorFromHue(hsva.h),\n      rgba: rgba,\n      hex: hex\n    };\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.setAlphaSliderBackground = function (backgroundColor) {\n    if (this.props.opacity && this.alphaSlider && this.alphaSlider.sliderTrack) {\n      this.alphaSlider.sliderTrack.style.background = \"linear-gradient(to top, transparent, \" + backgroundColor + \")\";\n    }\n  };\n\n  Object.defineProperty(ColorGradient.prototype, \"isUncontrolled\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this.props.value === undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  ColorGradient.prototype.getGradientRectMetrics = function () {\n    return this.gradientWrapper.getBoundingClientRect();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.prototype.render = function () {\n    var _this = this;\n\n    var className = classNames('k-widget k-flatcolorpicker', {\n      'k-state-disabled': this.props.disabled\n    });\n    return React.createElement(\"div\", {\n      className: className,\n      \"aria-disabled\": this.props.disabled ? 'true' : undefined,\n      style: this.props.style,\n      ref: function (el) {\n        return _this.wrapper = el;\n      },\n      tabIndex: getTabIndex(this.props.tabIndex, this.props.disabled)\n    }, React.createElement(\"div\", {\n      className: \"k-hbox k-hsv-wrap\"\n    }, React.createElement(\"div\", {\n      className: \"k-hsv-rectangle\",\n      style: {\n        background: this.state.backgroundColor\n      }\n    }, React.createElement(Draggable, {\n      onDrag: this.onDrag,\n      onRelease: this.onRelease,\n      ref: function (el) {\n        return _this.gradientWrapper = el ? el.element : undefined;\n      }\n    }, React.createElement(\"div\", {\n      className: \"k-hsv-gradient\",\n      style: {\n        touchAction: 'none'\n      },\n      onClick: this.onGradientWrapperClick\n    }, this.renderRectangleDragHandle()))), React.createElement(\"div\", {\n      className: \"k-hbox k-sliders-wrap\"\n    }, React.createElement(Slider, {\n      value: this.state.hsva.h,\n      buttons: false,\n      vertical: true,\n      min: 0,\n      max: 360,\n      step: 5,\n      onChange: this.onHueSliderChange,\n      className: \"k-hue-slider\",\n      disabled: this.props.disabled\n    }), this.props.opacity && React.createElement(Slider, {\n      value: isPresent(this.state.hsva.a) ? this.state.hsva.a * 100 : 100,\n      buttons: false,\n      vertical: true,\n      min: 0,\n      max: 100,\n      step: 1,\n      onChange: this.onAlphaSliderChange,\n      className: \"k-alpha-slider\",\n      disabled: this.props.disabled,\n      ref: function (el) {\n        return _this.alphaSlider = el;\n      }\n    }))), React.createElement(ColorInput, {\n      rgba: this.state.rgba,\n      onRgbaChange: this.onRgbaChange,\n      hex: this.state.hex,\n      onHexChange: this.onHexChange,\n      opacity: this.props.opacity,\n      disabled: this.props.disabled\n    }));\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorGradient.propTypes = {\n    defaultValue: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    opacity: PropTypes.bool,\n    disabled: PropTypes.bool,\n    style: PropTypes.any\n  };\n  /**\n   * @hidden\n   */\n\n  ColorGradient.defaultProps = {\n    opacity: true\n  };\n  return ColorGradient;\n}(React.Component);\n\nexport { ColorGradient };","map":null,"metadata":{},"sourceType":"module"}