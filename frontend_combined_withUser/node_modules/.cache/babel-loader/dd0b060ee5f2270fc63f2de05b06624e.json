{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { classNames } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar ANCHOR_VERTICAL_ALIGN = 'bottom';\n/**\n * @hidden\n */\n\nvar POPUP_VERTICAL_ALIGN = 'top';\n/**\n * @hidden\n */\n\nexport var Picker = function (props) {\n  var popupSettings = props.popupSettings || {};\n  var horizontalAlign = props.dir === 'rtl' ? 'right' : 'left';\n  var anchorAlign = React.useMemo(function () {\n    return {\n      horizontal: horizontalAlign,\n      vertical: ANCHOR_VERTICAL_ALIGN\n    };\n  }, [horizontalAlign]);\n  var popupAlign = React.useMemo(function () {\n    return {\n      horizontal: horizontalAlign,\n      vertical: POPUP_VERTICAL_ALIGN\n    };\n  }, [horizontalAlign]);\n  return React.createElement(React.Fragment, null, props.input, props.button, React.createElement(Popup, __assign({\n    style: __assign({}, (popupSettings || {}).style, {\n      direction: props.dir\n    })\n  }, popupSettings, {\n    anchor: props.popupAnchor,\n    anchorAlign: anchorAlign,\n    popupAlign: popupAlign,\n    show: props.open,\n    open: props.onOpen,\n    close: props.onClose,\n    className: classNames('k-reset', popupSettings.className)\n  }), props.content));\n};\nPicker.displayName = 'KendoPickerComponent';","map":null,"metadata":{},"sourceType":"module"}