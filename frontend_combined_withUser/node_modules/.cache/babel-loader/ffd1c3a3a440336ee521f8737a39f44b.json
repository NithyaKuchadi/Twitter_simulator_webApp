{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Keys, classNames, guid, useRtl, getTabIndex, dispatchEvent } from '@progress/kendo-react-common';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { messages, checkboxValidation } from './../messages';\n/**\n * Represents the [KendoReact Checkbox component]({% slug overview_checkbox %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     render() {\n *         return <Checkbox />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var Checkbox = React.forwardRef(function (props, target) {\n  var checked = props.checked,\n      className = props.className,\n      children = props.children,\n      defaultChecked = props.defaultChecked,\n      disabled = props.disabled,\n      id = props.id,\n      label = props.label,\n      labelPlacement = props.labelPlacement,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      tabIndex = props.tabIndex,\n      value = props.value,\n      required = props.required,\n      validationMessage = props.validationMessage,\n      validityStyles = props.validityStyles;\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: elementRef,\n      focus: focusElement\n    };\n  });\n\n  var _a = React.useState(defaultChecked),\n      stateChecked = _a[0],\n      setStateChecked = _a[1];\n\n  var valueIsBoolean = typeof value === 'boolean' || value === null;\n  var isControlled = checked !== undefined || valueIsBoolean;\n  var currentChecked = isControlled ? checked : stateChecked;\n  var useValueAsChecked = currentChecked === undefined && valueIsBoolean;\n  var checkedProp = useValueAsChecked ? value : currentChecked;\n  var valueProp = useValueAsChecked || valueIsBoolean ? undefined : value;\n  var indeterminateProp = checkedProp === null;\n  var calculatedId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var localizationService = useLocalization();\n\n  var localizeMessage = function (message) {\n    return localizationService.toLanguageString(message, messages[message]);\n  };\n\n  var defaultValidationMessage = localizeMessage(checkboxValidation);\n  var isValid = props.valid !== undefined ? props.valid : !required ? true : currentChecked ? true : false;\n  React.useEffect(function () {\n    if (elementRef.current && elementRef.current.setCustomValidity) {\n      elementRef.current.setCustomValidity(isValid ? '' : validationMessage || defaultValidationMessage);\n    }\n  }, [isValid, validationMessage, defaultValidationMessage]);\n  var setValue = React.useCallback(function (e, val) {\n    if (!isControlled) {\n      setStateChecked(val);\n    }\n\n    if (onChange) {\n      var handle = {\n        element: elementRef,\n        focus: focusElement\n      };\n      dispatchEvent(onChange, e, handle, {\n        value: val\n      });\n    }\n  }, [onChange, setStateChecked]);\n  var onChangeHandler = React.useCallback(function (e) {\n    var newValue = e.target.checked;\n    setValue(e, newValue);\n  }, []);\n  var onKeyDownHandler = React.useCallback(function (e) {\n    if (disabled) {\n      return;\n    }\n\n    var keyCode = e.keyCode;\n    var currentValue = e.currentTarget.checked;\n\n    if (keyCode === Keys.space || keyCode === Keys.enter) {\n      e.preventDefault();\n      e.stopPropagation();\n      setValue(e, !currentValue);\n    }\n  }, []);\n  var onFocusHandler = React.useCallback(function (e) {\n    if (onFocus) {\n      var handle = {\n        element: elementRef,\n        focus: focusElement\n      };\n      dispatchEvent(onFocus, e, handle, undefined);\n    }\n  }, [onFocus]);\n  var dir = useRtl(elementRef, props.dir);\n  var checkboxClasses = classNames({\n    'k-state-default': !disabled,\n    'k-state-disabled': disabled\n  }, className);\n  var inputProps = {\n    type: 'checkbox',\n    className: classNames({\n      'k-checkbox': true,\n      'k-state-indeterminate': indeterminateProp,\n      'k-state-invalid': !(isValid || validityStyles !== undefined || validityStyles === true)\n    }),\n    ref: elementRef,\n    id: id || calculatedId,\n    checked: Boolean(checkedProp),\n    disabled: disabled,\n    tabIndex: getTabIndex(tabIndex, disabled),\n    role: 'checkbox',\n    required: required !== undefined ? required : false,\n    'aria-checked': currentChecked || checkedProp ? true : indeterminateProp ? 'mixed' : false,\n    'aria-disabled': disabled || undefined,\n    onChange: onChangeHandler,\n    onKeyDown: onKeyDownHandler,\n    onFocus: onFocusHandler\n  };\n  var checkboxInput = React.createElement(React.Fragment, null, // removing value prop is required due to bug in react where\n  // value set to undefined override default submit value\n  valueProp === undefined ? React.createElement(\"input\", __assign({}, inputProps)) : React.createElement(\"input\", __assign({}, inputProps, {\n    value: valueIsBoolean ? undefined : valueProp\n  })));\n  var checkboxLabel = React.createElement(React.Fragment, null, label !== undefined ? React.createElement(\"label\", {\n    className: 'k-checkbox-label',\n    htmlFor: id || calculatedId,\n    style: {\n      userSelect: 'none'\n    }\n  }, label) : null);\n  return React.createElement(React.Fragment, null, labelPlacement === 'before' ? React.createElement(\"span\", {\n    className: checkboxClasses,\n    dir: 'rtl'\n  }, checkboxInput, checkboxLabel, children) : React.createElement(\"span\", {\n    className: checkboxClasses,\n    dir: dir\n  }, checkboxInput, checkboxLabel, children));\n});\nCheckbox.propTypes = {\n  checked: PropTypes.bool,\n  className: PropTypes.string,\n  defaultChecked: PropTypes.bool,\n  defaultValue: PropTypes.any,\n  dir: PropTypes.string,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  label: PropTypes.string,\n  labelPlacement: PropTypes.string,\n  tabIndex: PropTypes.number,\n  value: PropTypes.any,\n  validationMessage: PropTypes.string,\n  required: PropTypes.bool,\n  validate: PropTypes.bool,\n  valid: PropTypes.bool,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func\n};\nCheckbox.displayName = 'KendoCheckbox';","map":null,"metadata":{},"sourceType":"module"}