{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, Keys, useRtl, getTabIndex } from '@progress/kendo-react-common';\nimport { Picker } from './Picker';\nimport { ColorGradient } from './ColorGradient';\nimport { ColorPalette, DEFAULT_PRESET, DEFAULT_TILE_SIZE } from './ColorPalette';\n/**\n * @hidden\n */\n\nvar DEFAULT_GRADIENT_SETTINGS = {\n  opacity: true\n};\n/**\n * @hidden\n */\n\nvar DEFAULT_PALETTE_SETTINGS = {\n  palette: DEFAULT_PRESET,\n  tileSize: DEFAULT_TILE_SIZE\n};\n/**\n * @hidden\n */\n\nvar isControlled = function (prop) {\n  return prop !== undefined;\n};\n/**\n * Represents the [KendoReact ColorPicker component]({% slug overview_colorpicker %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     render() {\n *         return <ColorPicker />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\n\nexport var ColorPicker = React.forwardRef(function (props, target) {\n  var popupSettings = props.popupSettings,\n      gradientSettings = props.gradientSettings,\n      paletteSettings = props.paletteSettings,\n      disabled = props.disabled,\n      tabIndex = props.tabIndex,\n      view = props.view,\n      icon = props.icon,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur;\n  var focusableElementRef = React.useRef(null);\n  var gradientRef = React.useRef(null);\n  var paletteRef = React.useRef(null);\n  var blurTimeoutRef = React.useRef();\n  var focusElement = React.useCallback(function () {\n    if (focusableElementRef.current) {\n      focusableElementRef.current.focus();\n    }\n  }, []);\n  React.useImperativeHandle(target, function () {\n    return {\n      // we agreed that each element will have focus method exposed\n      element: focusableElementRef.current,\n      focus: focusElement\n    };\n  });\n\n  var _a = React.useState(false),\n      focused = _a[0],\n      setFocused = _a[1];\n\n  var _b = React.useState(props.defaultValue),\n      stateValue = _b[0],\n      setStateValue = _b[1];\n\n  var _c = React.useState(false),\n      stateOpen = _c[0],\n      setStateOpen = _c[1];\n\n  var isValueControlled = isControlled(props.value);\n  var isOpenControlled = isControlled(props.open);\n  var value = isValueControlled ? props.value : stateValue;\n  var open = isOpenControlled ? props.open : stateOpen;\n  var setOpen = React.useCallback(function (nextOpen, isBlur) {\n    if (!isOpenControlled) {\n      if (!nextOpen && !isBlur && focusableElementRef && focusableElementRef.current) {\n        focusableElementRef.current.focus();\n      }\n\n      setStateOpen(nextOpen);\n    }\n  }, [isOpenControlled]);\n  var onKeyDownHandler = React.useCallback(function (event) {\n    var altKey = event.altKey,\n        keyCode = event.keyCode;\n\n    if (keyCode === Keys.esc) {\n      setOpen(false);\n      return;\n    }\n\n    if (keyCode === Keys.enter && !isOpenControlled) {\n      event.preventDefault();\n      event.stopPropagation();\n      setOpen(!open);\n      return;\n    }\n\n    if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (keyCode === Keys.up && focusableElementRef && focusableElementRef.current) {\n        focusableElementRef.current.focus();\n        setOpen(false);\n      }\n\n      if (keyCode === Keys.down) {\n        setOpen(true);\n      }\n    }\n  }, [open, isOpenControlled]);\n  var onOpenHandler = React.useCallback(function () {\n    // Skip content autofocus when in controlled mode\n    if (!isOpenControlled) {\n      if (gradientRef.current) {\n        gradientRef.current.focus();\n      } else if (paletteRef.current) {\n        paletteRef.current.focus();\n      }\n    }\n  }, [isOpenControlled]);\n  var onClickHandler = React.useCallback(function () {\n    setOpen(!open, true);\n  }, [open]);\n  var onFocusHandler = React.useCallback(function (event) {\n    if (blurTimeoutRef.current) {\n      clearTimeout(blurTimeoutRef.current);\n      blurTimeoutRef.current = undefined; // case where moving back to input from popup\n      // if (event.target === focusableElementRef.current) {\n      // setOpen(false); // in this case we should focus input on keydown\n      // }\n    } else {\n      setFocused(true);\n    }\n\n    if (onFocus) {\n      onFocus.call(undefined, {\n        nativeEvent: event.nativeEvent,\n        syntheticEvent: event\n      });\n    }\n  }, [onFocus]);\n  var onBlurTimeout = React.useCallback(function () {\n    setOpen(false, true);\n    setFocused(false);\n    blurTimeoutRef.current = undefined;\n  }, []);\n  var onBlurHandler = React.useCallback(function (event) {\n    clearTimeout(blurTimeoutRef.current);\n    blurTimeoutRef.current = setTimeout(onBlurTimeout);\n\n    if (onBlur) {\n      onBlur.call(undefined, {\n        nativeEvent: event.nativeEvent,\n        syntheticEvent: event\n      });\n    }\n  }, [onBlur]);\n  var onChangeHandler = React.useCallback(function (event, isPalette) {\n    var currentValue = isPalette ? event.rgbaValue : event.value;\n\n    if (!isValueControlled) {\n      setStateValue(currentValue);\n    }\n\n    if (isPalette) {\n      setOpen(false);\n    }\n\n    if (onChange) {\n      onChange.call(undefined, {\n        value: currentValue,\n        nativeEvent: event.nativeEvent,\n        syntheticEvent: event.syntheticEvent\n      });\n    }\n  }, [isValueControlled, onChange]);\n  var onPaletteChangeHandler = React.useCallback(function (event) {\n    return onChangeHandler(event, true);\n  }, [isControlled, onChangeHandler]);\n  var dir = useRtl(focusableElementRef, props.dir);\n  var iconClassName = props.iconClassName || icon && \"k-icon k-i-\" + icon;\n  var className = React.useMemo(function () {\n    return classNames({\n      'k-picker-wrap': true,\n      'k-state-default': !disabled,\n      'k-state-disabled': disabled,\n      'k-state-focused': focused\n    });\n  }, [focused, disabled]);\n  return React.createElement(\"span\", {\n    className: 'k-widget k-colorpicker',\n    dir: dir\n  }, React.createElement(\"span\", {\n    className: className,\n    ref: focusableElementRef,\n    tabIndex: getTabIndex(tabIndex, disabled),\n    onKeyDown: onKeyDownHandler,\n    onFocus: onFocusHandler,\n    onBlur: onBlurHandler\n  }, React.createElement(Picker, {\n    dir: dir,\n    open: open,\n    onOpen: onOpenHandler,\n    popupAnchor: focusableElementRef.current || undefined,\n    popupSettings: __assign({}, popupSettings),\n    input: !iconClassName ? React.createElement(\"span\", {\n      className: 'k-selected-color',\n      style: {\n        backgroundColor: value\n      }\n    }, !value && React.createElement(\"span\", {\n      className: 'k-icon k-i-line'\n    })) : React.createElement(\"span\", {\n      className: classNames('k-tool-icon', iconClassName)\n    }, React.createElement(\"span\", {\n      className: 'k-selected-color',\n      style: {\n        backgroundColor: value\n      }\n    })),\n    button: React.createElement(\"span\", {\n      onClick: onClickHandler,\n      className: 'k-select'\n    }, React.createElement(\"span\", {\n      className: 'k-icon k-i-arrow-s'\n    })),\n    content: React.createElement(React.Fragment, null, (view === 'combo' || view === 'gradient') && React.createElement(ColorGradient, __assign({}, gradientSettings, {\n      tabIndex: 0,\n      ref: gradientRef,\n      value: value,\n      onChange: onChangeHandler\n    })), (view === 'combo' || view === 'palette') && React.createElement(ColorPalette, __assign({}, paletteSettings, {\n      ref: paletteRef,\n      value: value,\n      onChange: onPaletteChangeHandler\n    })))\n  })));\n});\nColorPicker.propTypes = {\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  disabled: PropTypes.bool,\n  view: PropTypes.oneOf(['gradient', 'palette', 'combo']),\n  dir: PropTypes.string\n};\nColorPicker.defaultProps = {\n  view: 'palette',\n  gradientSettings: DEFAULT_GRADIENT_SETTINGS,\n  paletteSettings: DEFAULT_PALETTE_SETTINGS\n};\nColorPicker.displayName = 'KendoColorPicker';","map":null,"metadata":{},"sourceType":"module"}