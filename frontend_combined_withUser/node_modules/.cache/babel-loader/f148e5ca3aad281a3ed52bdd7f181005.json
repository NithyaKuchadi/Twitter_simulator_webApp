{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, guid, noop, Keys, dispatchEvent, getTabIndex } from '@progress/kendo-react-common';\nimport { provideLocalizationService } from '@progress/kendo-react-intl';\nimport { messages, switchValidation } from './../messages';\nvar SWITCH_CONTAINER = 'k-switch-container';\nvar SWITCH_HANDLE = 'k-switch-handle';\nvar SWITCH_LABEL_ON = 'k-switch-label-on';\nvar SWITCH_LABEL_OFF = 'k-switch-label-off';\n/**\n * Represents the [KendoReact Switch component]({% slug overview_switch%}).\n */\n\nvar Switch =\n/** @class */\nfunction (_super) {\n  __extends(Switch, _super);\n  /**\n   * @hidden\n   */\n\n\n  function Switch(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.setValidity = function () {\n      if (_this._input && _this._input.setCustomValidity) {\n        _this._input.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || _this.defaultValidationMessage.toLanguageString(switchValidation, messages[switchValidation]));\n      }\n    };\n\n    _this.limit = function (offset, drag, wrapper) {\n      var wrapperWidth = wrapper.offsetWidth;\n      var margin = drag.offsetWidth;\n\n      if (offset < 0) {\n        return 0;\n      } else if (offset > wrapperWidth - margin) {\n        return wrapperWidth - margin;\n      }\n\n      return offset;\n    };\n\n    _this.toggle = function (value, event) {\n      _this.setState({\n        checked: value\n      });\n\n      _this.valueDuringOnChange = value;\n      dispatchEvent(_this.props.onChange, event, _this, {\n        value: value\n      });\n      _this.valueDuringOnChange = undefined;\n    };\n\n    _this._id = guid();\n    _this.defaultValidationMessage = provideLocalizationService(_this);\n\n    _this.dummyInput = function (value) {\n      /* Dummy component to support forms */\n      return React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: _this.props.checked,\n        ref: function (el) {\n          _this._input = el;\n        },\n        tabIndex: -1,\n        \"aria-hidden\": true,\n        value: value,\n        style: {\n          opacity: 0,\n          width: 1,\n          border: 0,\n          zIndex: -1,\n          position: 'absolute',\n          left: '50%'\n        }\n      });\n    };\n\n    _this.handleClick = function (event) {\n      _this.toggle(!_this.value, event);\n    };\n\n    _this.handleKeyDown = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var keyCode = event.keyCode;\n\n      if (keyCode === Keys.space || keyCode === Keys.enter) {\n        _this.toggle(!_this.value, event);\n      }\n    };\n\n    _this.handleWrapperFocus = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.setState({\n        focused: true\n      });\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus.call(undefined, event);\n      }\n    };\n\n    _this.handleWrapperBlur = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.setState({\n        focused: false\n      });\n\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur.call(undefined, event);\n      }\n    };\n\n    _this.state = {\n      checked: props.defaultChecked || Switch.defaultProps.defaultChecked,\n      focused: false\n    };\n    return _this;\n  }\n\n  Object.defineProperty(Switch.prototype, \"value\", {\n    /**\n     * Gets the value of the Switch.\n     */\n    get: function () {\n      return this.valueDuringOnChange !== undefined ? this.valueDuringOnChange : this.props.checked !== undefined ? this.props.checked : this.state.checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Switch.prototype, \"element\", {\n    get: function () {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Switch.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the Switch.\n     */\n    get: function () {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Switch.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the Switch is set.\n     */\n    get: function () {\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = this.props.valid !== undefined ? this.props.valid : !this.props.required ? true : this.value ? true : false;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Switch.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : Switch.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Switch.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this.props.required !== undefined ? this.props.required : Switch.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Switch.prototype.componentDidMount = function () {\n    this.setValidity(); // Due to dynamic dir calculation\n\n    this.forceUpdate();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Switch.prototype.componentDidUpdate = function () {\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Switch.prototype.focus = function () {\n    if (this._element) {\n      this._element.focus();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Switch.prototype.render = function () {\n    var _this = this;\n\n    var focused = this.state.focused;\n    var _a = this.props,\n        dir = _a.dir,\n        disabled = _a.disabled,\n        id = _a.id,\n        offLabel = _a.offLabel,\n        onLabel = _a.onLabel,\n        tabIndex = _a.tabIndex;\n    this.dir = dir || this._wrapper && getComputedStyle(this._wrapper).direction || undefined;\n    var isValid = !this.validityStyles || this.validity.valid;\n    var switchClassName = classNames({\n      'k-widget': true,\n      'k-switch': true,\n      'k-switch-on': this.value,\n      'k-switch-off': !this.value,\n      'k-state-focused': focused,\n      'k-state-disabled': disabled,\n      'k-state-invalid': !isValid\n    }, this.props.className);\n    var ariaAttributes = {\n      'aria-checked': this.value,\n      'aria-disabled': disabled || undefined\n    };\n    return React.createElement(\"span\", __assign({\n      ref: function (span) {\n        _this._wrapper = span;\n      },\n      className: switchClassName,\n      dir: this.dir,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      onBlur: this.handleWrapperBlur,\n      onFocus: this.handleWrapperFocus\n    }, ariaAttributes), React.createElement(\"span\", {\n      className: SWITCH_CONTAINER,\n      id: id || this._id,\n      ref: function (span) {\n        _this._element = span;\n      },\n      tabIndex: getTabIndex(tabIndex, disabled, undefined),\n      accessKey: this.props.accessKey\n    }, this.dummyInput(this.value), React.createElement(\"span\", {\n      className: SWITCH_LABEL_ON\n    }, onLabel), React.createElement(\"span\", {\n      className: SWITCH_LABEL_OFF\n    }, offLabel), React.createElement(\"span\", {\n      className: SWITCH_HANDLE\n    })));\n  };\n  /**\n   * @hidden\n   */\n\n\n  Switch.propTypes = {\n    accessKey: PropTypes.string,\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    dir: PropTypes.string,\n    id: PropTypes.string,\n    offLabel: PropTypes.string,\n    required: PropTypes.bool,\n    tabIndex: PropTypes.number,\n    valid: PropTypes.bool,\n    validate: PropTypes.bool,\n    validationMessage: PropTypes.string,\n    onBlur: PropTypes.any,\n    onChange: PropTypes.any,\n    onFocus: PropTypes.any,\n    onLabel: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  Switch.defaultProps = {\n    disabled: false,\n    defaultChecked: false,\n    offLabel: 'OFF',\n    onBlur: noop,\n    onFocus: noop,\n    onLabel: 'ON',\n    required: false,\n    validityStyles: true\n  };\n  return Switch;\n}(React.Component);\n\nexport { Switch };","map":null,"metadata":{},"sourceType":"module"}