{"ast":null,"code":"import { parseColor as parse, Color } from '@progress/kendo-drawing';\nimport { isPresent, fitIntoBounds } from './misc';\n/**\n * @hidden\n *\n * Returns the hex or RGBA string representation of the color.\n */\n\nexport var parseColor = function (value, format, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var allowedFormats = ['hex', 'rgba']; // TODO: constant?\n  // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];\n\n  if (allowedFormats.indexOf(format) === -1) {\n    throw new Error(\"Unsupported color output format '\" + format + \"'. The available options are 'hex' or 'rgba'.\");\n  }\n\n  if (!isPresent(value)) {\n    return;\n  }\n\n  var parsedColor = parse(value.trim(), safe);\n\n  if (!isPresent(parsedColor)) {\n    return;\n  }\n\n  return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns an HSV object representation of the color string.\n */\n\nexport var getHSV = function (value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var parsed = parse(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toHSV();\n};\n/**\n * @hidden\n *\n * Returns an RGBA object representation of the color string.\n */\n\nexport var getRGBA = function (value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var parsed = parse(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toBytes();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\n\nexport var getColorFromHSV = function (hsva) {\n  var hue = fitIntoBounds(hsva.h, 0, 359.9);\n  var saturation = fitIntoBounds(hsva.s, 0, 1);\n  var value = fitIntoBounds(hsva.v, 0, 1);\n  var alpha = fitIntoBounds(hsva.a, 0, 1);\n  return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color based on the `hue` and\n * assuming the `value`, `saturation`, and `alpha` have a value of `1`.\n */\n\nexport var getColorFromHue = function (hue) {\n  return getColorFromHSV({\n    h: hue,\n    s: 1,\n    v: 1,\n    a: 1\n  });\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\n\nexport var getColorFromRGBA = function (rgba) {\n  var red = fitIntoBounds(rgba.r, 0, 255);\n  var green = fitIntoBounds(rgba.g, 0, 255);\n  var blue = fitIntoBounds(rgba.b, 0, 255);\n  var alpha = fitIntoBounds(rgba.a, 0, 1);\n  return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};","map":null,"metadata":{},"sourceType":"module"}