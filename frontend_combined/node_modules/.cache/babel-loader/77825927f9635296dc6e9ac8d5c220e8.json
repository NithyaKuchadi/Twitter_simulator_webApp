{"ast":null,"code":"import * as types from \"./action-types\";\nimport * as feedsApi from \"../../api/feeds\";\nexport function networkConnectionError() {\n  return {\n    type: types.NETWORK_CONNECTION_ERROR\n  };\n}\nexport function getUserFeeds(userId, pageNumber, callback) {\n  return function (dispatch) {\n    debugger;\n    return feedsApi.getUserFeeds(userId, pageNumber).then(response => {\n      console.log(\"Status Code : \", response.status);\n\n      if (response.status === 200) {\n        callback(\"SUCCESS\", response.data);\n        dispatch(getFeedSuccess(response.data));\n      }\n    }).catch(error => {\n      if (error.message === \"Network Error\") {\n        dispatch(networkConnectionError());\n      } else {\n        dispatch(getFeedFailure());\n      }\n    });\n  };\n}\nexport function getFeedSuccess(result) {\n  return {\n    type: types.GET_FEEDS_SUCCESS,\n    result\n  };\n}\nexport function getFeedFailure() {\n  return {\n    type: types.GET_FEEDS_FAILURE\n  };\n}\nexport function blockFollowing(userId, followingUserId, callback) {\n  return function (dispatch) {\n    debugger;\n    return feedsApi.blockFollowing(userId, followingUserId).then(response => {\n      console.log(\"Status Code : \", response.status);\n\n      if (response.status === 200) {\n        callback(\"SUCCESS\", response.data);\n        dispatch(blockFollowingSuccess(response.data));\n      }\n    }).catch(error => {\n      if (error.message === \"Network Error\") {\n        dispatch(networkConnectionError());\n      } else {\n        dispatch(blockFollowingFailure());\n      }\n    });\n  };\n}\nexport function blockFollowingSuccess(result) {\n  return {\n    type: types.BLOCK_FOLLOWING_SUCCESS,\n    result\n  };\n}\nexport function blockFollowingFailure() {\n  return {\n    type: types.BLOCK_FOLLOWING_FAILURE\n  };\n}\nexport function muteFollowing(userId, followingUserId, callback) {\n  return function (dispatch) {\n    debugger;\n    return feedsApi.muteFollowing(userId, followingUserId).then(response => {\n      console.log(\"Status Code : \", response.status);\n\n      if (response.status === 200) {\n        callback(\"SUCCESS\", response.data);\n        dispatch(muteFollowingSuccess(response.data));\n      }\n    }).catch(error => {\n      if (error.message === \"Network Error\") {\n        dispatch(networkConnectionError());\n      } else {\n        dispatch(muteFollowingFailure());\n      }\n    });\n  };\n}\nexport function muteFollowingSuccess(result) {\n  return {\n    type: types.MUTE_FOLLOWING_SUCCESS,\n    result\n  };\n}\nexport function muteFollowingFailure() {\n  return {\n    type: types.MUTE_FOLLOWING_FAILURE\n  };\n}\nexport function likeTweet(userId, tweetId, callback) {\n  return function (dispatch) {\n    debugger;\n    return feedsApi.muteFollowing(userId, tweetId).then(response => {\n      console.log(\"Status Code : \", response.status);\n\n      if (response.status === 200) {\n        callback(\"SUCCESS\", response.data);\n        dispatch(likeTweetSuccess(response.data));\n      }\n    }).catch(error => {\n      if (error.message === \"Network Error\") {\n        dispatch(networkConnectionError());\n      } else {\n        dispatch(likeTweetFailure());\n      }\n    });\n  };\n}\nexport function likeTweetSuccess(result) {\n  return {\n    type: types.LIKE_TWEET_SUCCESS,\n    result\n  };\n}\nexport function likeTweetFailure() {\n  return {\n    type: types.LIKE_TWEET_FAILURE\n  };\n}\nexport function unlikeTweet(userId, tweetId, callback) {\n  return function (dispatch) {\n    debugger;\n    return feedsApi.unlikeTweet(userId, tweetId).then(response => {\n      console.log(\"Status Code : \", response.status);\n\n      if (response.status === 200) {\n        callback(\"SUCCESS\", response.data);\n        dispatch(unlikeTweetSuccess(response.data));\n      }\n    }).catch(error => {\n      if (error.message === \"Network Error\") {\n        dispatch(networkConnectionError());\n      } else {\n        dispatch(unlikeTweetFailure());\n      }\n    });\n  };\n}\nexport function unlikeTweetSuccess(result) {\n  return {\n    type: types.UNLIKE_TWEET_SUCCESS,\n    result\n  };\n}\nexport function unlikeTweetFailure() {\n  return {\n    type: types.UNLIKE_TWEET_FAILURE\n  };\n}\nexport function reTweet(userId, tweetId, callback) {\n  return function (dispatch) {\n    debugger;\n    return feedsApi.reTweet(userId, tweetId).then(response => {\n      console.log(\"Status Code : \", response.status);\n\n      if (response.status === 200) {\n        callback(\"SUCCESS\", response.data);\n        dispatch(reTweetSuccess(response.data));\n      }\n    }).catch(error => {\n      if (error.message === \"Network Error\") {\n        dispatch(networkConnectionError());\n      } else {\n        dispatch(reTweetFailure());\n      }\n    });\n  };\n}\nexport function reTweetSuccess(result) {\n  return {\n    type: types.RETWEET_SUCCESS,\n    result\n  };\n}\nexport function reTweetFailure() {\n  return {\n    type: types.RETWEET_FAILURE\n  };\n}\nexport function replyToTweet(userId, tweetId, body, callback) {\n  return function (dispatch) {\n    debugger;\n    return feedsApi.replyToTweet(userId, tweetId, body).then(response => {\n      console.log(\"Status Code : \", response.status);\n\n      if (response.status === 200) {\n        callback(\"SUCCESS\", response.data);\n        dispatch(replyToTweetSuccess(response.data));\n      }\n    }).catch(error => {\n      if (error.message === \"Network Error\") {\n        dispatch(networkConnectionError());\n      } else {\n        dispatch(replyToTweetFailure());\n      }\n    });\n  };\n}\nexport function replyToTweetSuccess(result) {\n  return {\n    type: types.REPLYTO_TWEET_SUCCESS,\n    result\n  };\n}\nexport function replyToTweetFailure() {\n  return {\n    type: types.REPLYTO_TWEET_FAILURE\n  };\n}","map":{"version":3,"sources":["/Users/shalabhneema/Documents/273-Shim/TwitterMain/Twitter_simulator_webApp/frontend_combined/src/redux/actions/feeds-actions.js"],"names":["types","feedsApi","networkConnectionError","type","NETWORK_CONNECTION_ERROR","getUserFeeds","userId","pageNumber","callback","dispatch","then","response","console","log","status","data","getFeedSuccess","catch","error","message","getFeedFailure","result","GET_FEEDS_SUCCESS","GET_FEEDS_FAILURE","blockFollowing","followingUserId","blockFollowingSuccess","blockFollowingFailure","BLOCK_FOLLOWING_SUCCESS","BLOCK_FOLLOWING_FAILURE","muteFollowing","muteFollowingSuccess","muteFollowingFailure","MUTE_FOLLOWING_SUCCESS","MUTE_FOLLOWING_FAILURE","likeTweet","tweetId","likeTweetSuccess","likeTweetFailure","LIKE_TWEET_SUCCESS","LIKE_TWEET_FAILURE","unlikeTweet","unlikeTweetSuccess","unlikeTweetFailure","UNLIKE_TWEET_SUCCESS","UNLIKE_TWEET_FAILURE","reTweet","reTweetSuccess","reTweetFailure","RETWEET_SUCCESS","RETWEET_FAILURE","replyToTweet","body","replyToTweetSuccess","replyToTweetFailure","REPLYTO_TWEET_SUCCESS","REPLYTO_TWEET_FAILURE"],"mappings":"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","sourcesContent":["import * as types from \"./action-types\";\nimport * as feedsApi from \"../../api/feeds\";\n\nexport function networkConnectionError() {\n    return { type: types.NETWORK_CONNECTION_ERROR };\n  }\n\nexport function getUserFeeds(userId, pageNumber, callback) {\n    return function(dispatch) {\n        debugger;\n      return feedsApi\n        .getUserFeeds(userId, pageNumber)\n        .then(response => {\n          console.log(\"Status Code : \", response.status);\n          if (response.status === 200) {\n            callback(\"SUCCESS\", response.data);\n            dispatch(getFeedSuccess(response.data));\n          }\n        })\n        .catch(error => {\n          if (error.message === \"Network Error\") {\n            dispatch(networkConnectionError());\n          } else {\n            dispatch(getFeedFailure());\n          }\n        });\n    };\n  }\n\n  export function getFeedSuccess(result) {\n    return { type: types.GET_FEEDS_SUCCESS, result };\n  }\n\n  export function getFeedFailure() {\n    return { type: types.GET_FEEDS_FAILURE };\n  }\n\n  export function blockFollowing(userId, followingUserId, callback) {\n    return function(dispatch) {\n        debugger;\n      return feedsApi\n        .blockFollowing(userId, followingUserId)\n        .then(response => {\n          console.log(\"Status Code : \", response.status);\n          if (response.status === 200) {\n            callback(\"SUCCESS\", response.data);\n            dispatch(blockFollowingSuccess(response.data));\n          }\n        })\n        .catch(error => {\n          if (error.message === \"Network Error\") {\n            dispatch(networkConnectionError());\n          } else {\n            dispatch(blockFollowingFailure());\n          }\n        });\n    };\n  }\n\n  export function blockFollowingSuccess(result) {\n    return { type: types.BLOCK_FOLLOWING_SUCCESS, result };\n  }\n\n  export function blockFollowingFailure() {\n    return { type: types.BLOCK_FOLLOWING_FAILURE };\n  }\n\n  export function muteFollowing(userId, followingUserId, callback) {\n    return function(dispatch) {\n        debugger;\n      return feedsApi\n        .muteFollowing(userId, followingUserId)\n        .then(response => {\n          console.log(\"Status Code : \", response.status);\n          if (response.status === 200) {\n            callback(\"SUCCESS\", response.data);\n            dispatch(muteFollowingSuccess(response.data));\n          }\n        })\n        .catch(error => {\n          if (error.message === \"Network Error\") {\n            dispatch(networkConnectionError());\n          } else {\n            dispatch(muteFollowingFailure());\n          }\n        });\n    };\n  }\n\n  export function muteFollowingSuccess(result) {\n    return { type: types.MUTE_FOLLOWING_SUCCESS, result };\n  }\n\n  export function muteFollowingFailure() {\n    return { type: types.MUTE_FOLLOWING_FAILURE };\n  }\n\n  export function likeTweet(userId, tweetId, callback) {\n    return function(dispatch) {\n        debugger;\n      return feedsApi\n        .muteFollowing(userId, tweetId)\n        .then(response => {\n          console.log(\"Status Code : \", response.status);\n          if (response.status === 200) {\n            callback(\"SUCCESS\", response.data);\n            dispatch(likeTweetSuccess(response.data));\n          }\n        })\n        .catch(error => {\n          if (error.message === \"Network Error\") {\n            dispatch(networkConnectionError());\n          } else {\n            dispatch(likeTweetFailure());\n          }\n        });\n    };\n  }\n\n  export function likeTweetSuccess(result) {\n    return { type: types.LIKE_TWEET_SUCCESS, result };\n  }\n\n  export function likeTweetFailure() {\n    return { type: types.LIKE_TWEET_FAILURE };\n  }\n\n\n  export function unlikeTweet(userId, tweetId, callback) {\n    return function(dispatch) {\n        debugger;\n      return feedsApi\n        .unlikeTweet(userId, tweetId)\n        .then(response => {\n          console.log(\"Status Code : \", response.status);\n          if (response.status === 200) {\n            callback(\"SUCCESS\", response.data);\n            dispatch(unlikeTweetSuccess(response.data));\n          }\n        })\n        .catch(error => {\n          if (error.message === \"Network Error\") {\n            dispatch(networkConnectionError());\n          } else {\n            dispatch(unlikeTweetFailure());\n          }\n        });\n    };\n  }\n\n  export function unlikeTweetSuccess(result) {\n    return { type: types.UNLIKE_TWEET_SUCCESS, result };\n  }\n\n  export function unlikeTweetFailure() {\n    return { type: types.UNLIKE_TWEET_FAILURE };\n  }\n\n  export function reTweet(userId, tweetId, callback) {\n    return function(dispatch) {\n        debugger;\n      return feedsApi\n        .reTweet(userId, tweetId)\n        .then(response => {\n          console.log(\"Status Code : \", response.status);\n          if (response.status === 200) {\n            callback(\"SUCCESS\", response.data);\n            dispatch(reTweetSuccess(response.data));\n          }\n        })\n        .catch(error => {\n          if (error.message === \"Network Error\") {\n            dispatch(networkConnectionError());\n          } else {\n            dispatch(reTweetFailure());\n          }\n        });\n    };\n  }\n\n  export function reTweetSuccess(result) {\n    return { type: types.RETWEET_SUCCESS, result };\n  }\n\n  export function reTweetFailure() {\n    return { type: types.RETWEET_FAILURE };\n  }\n\n  export function replyToTweet(userId, tweetId, body, callback) {\n    return function(dispatch) {\n        debugger;\n      return feedsApi\n        .replyToTweet(userId, tweetId, body)\n        .then(response => {\n          console.log(\"Status Code : \", response.status);\n          if (response.status === 200) {\n            callback(\"SUCCESS\", response.data);\n            dispatch(replyToTweetSuccess(response.data));\n          }\n        })\n        .catch(error => {\n          if (error.message === \"Network Error\") {\n            dispatch(networkConnectionError());\n          } else {\n            dispatch(replyToTweetFailure());\n          }\n        });\n    };\n  }\n\n  export function replyToTweetSuccess(result) {\n    return { type: types.REPLYTO_TWEET_SUCCESS, result };\n  }\n\n  export function replyToTweetFailure() {\n    return { type: types.REPLYTO_TWEET_FAILURE };\n  }"]},"metadata":{},"sourceType":"module"}