{"ast":null,"code":"var _jsxFileName = \"/Users/shalabhneema/Documents/273-Shim/TwitterMain/Twitter_simulator_webApp/frontend_combined/src/components/tweet.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as tweetActions from \"../redux/actions/tweet-actions\";\nimport axios from 'axios';\nimport testimage from '../add_image.png';\nimport './tweet.css';\n\nclass TweetComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._handleImageChange = e => {\n      e.preventDefault(); //console.log(\"hanle iamge ---------\", e.target.files[0], typeof(e.target.files));\n      // this.setState({\n      //     image: [...this.state.image, e.target.files[0]]\n      // });\n      // this.setState({\n      //     image: e.target.files\n      // });\n      // FileList to Array\n\n      let files = Array.from(e.target.files); // File Reader for Each file and and update state arrays\n\n      let newimages = [];\n      files.forEach((file, i) => {\n        newimages.push(file);\n        let reader = new FileReader();\n\n        reader.onloadend = () => {\n          this.setState(prevState => ({\n            files: [...prevState.files, file[0]],\n            imagesPreviewUrls: [...prevState.imagesPreviewUrls, reader.result]\n          }));\n        };\n\n        reader.readAsDataURL(file);\n      });\n      this.setState({\n        image: [...this.state.image, ...newimages]\n      });\n    };\n\n    this.state = {\n      button_image: testimage,\n      files: [],\n      imagesPreviewUrls: [],\n      userid: 12,\n      image: [],\n      content: \"\"\n    };\n    this.onClick = this.onClick.bind(this);\n    this.clear = this.clear.bind(this);\n    this._handleImageChange = this._handleImageChange.bind(this);\n  }\n\n  onClick() {\n    if (this.state.content === \"\") return;\n    const data = new FormData();\n\n    for (let i = 0; i < this.state.image.length; i++) {\n      data.append('myImage', this.state.image[i]);\n    }\n\n    data.append('userid', this.state.userid);\n    data.append('content', this.state.content);\n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    }; // axios.defaults.withCredentials = true;\n    // //make a post request with the user data\n    // axios.post('http://localhost:3001/tweet',data, config)\n    //     .then(response => {\n    //         console.log(\"Status Code : \",response.status);\n    //         //console.log(\"type\",typeof(response.data));\n    //         if(response.status === 200){\n    //             console.log(\"tweet successfully!\");\n    //         }\n    // })\n\n    this.props.actions.tweet(data, config, (status, result) => {\n      if (status === 'SUCCESS') {\n        console.log(\"tweet successfully!\");\n      } else {\n        console.log(\"tweet failed!\");\n      }\n    });\n  }\n\n  clear() {\n    this.setState({\n      files: [],\n      imagesPreviewUrls: [],\n      image: []\n    });\n  }\n\n  render() {\n    let imagesPreviewUrls = this.state.imagesPreviewUrls; //console.log(\"files----------\", this.state.content);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      rows: \"4\",\n      cols: \"60\",\n      placeholder: \"What's happening?\",\n      onChange: e => this.setState({\n        content: e.target.value\n      }),\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), imagesPreviewUrls.map(function (imagePreviewUrl, i) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        key: i,\n        src: imagePreviewUrl,\n        width: \"100\",\n        height: \"100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    }), this.state.imagePreviewUrls != [] && React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.clear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"x\"), React.createElement(\"div\", {\n      class: \"image-upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"file-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.button_image,\n      height: \"30\",\n      width: \"30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      id: \"file-input\",\n      name: \"myImage\",\n      type: \"file\",\n      onChange: this._handleImageChange,\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      class: \"btn btn-secondary button1\",\n      type: \"submit\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Tweet\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      tweet: bindActionCreators(tweetActions.tweet, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TweetComponent); // export default TweetComponent;","map":{"version":3,"sources":["/Users/shalabhneema/Documents/273-Shim/TwitterMain/Twitter_simulator_webApp/frontend_combined/src/components/tweet.js"],"names":["React","connect","bindActionCreators","tweetActions","axios","testimage","TweetComponent","Component","constructor","props","_handleImageChange","e","preventDefault","files","Array","from","target","newimages","forEach","file","i","push","reader","FileReader","onloadend","setState","prevState","imagesPreviewUrls","result","readAsDataURL","image","state","button_image","userid","content","onClick","bind","clear","data","FormData","length","append","config","headers","actions","tweet","status","console","log","render","value","map","imagePreviewUrl","imagePreviewUrls","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as tweetActions from \"../redux/actions/tweet-actions\"; \nimport axios from 'axios';\nimport testimage from '../add_image.png';\nimport './tweet.css';\n\n\nclass TweetComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n            button_image: testimage,\n            files: [],\n            imagesPreviewUrls: [],\n            userid: 12,\n            image: [],\n            content: \"\"\n        };\n        this.onClick = this.onClick.bind(this);\n        this.clear = this.clear.bind(this);\n        this._handleImageChange = this._handleImageChange.bind(this);\n    }\n\n    onClick() {\n        if (this.state.content === \"\") return;\n        const data = new FormData();\n        for (let i=0; i<this.state.image.length; i++) {\n            data.append('myImage', this.state.image[i]);\n        }\n        data.append('userid', this.state.userid);\n        data.append('content', this.state.content);\n        \n        const config = {\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        };\n        // axios.defaults.withCredentials = true;\n        // //make a post request with the user data\n        // axios.post('http://localhost:3001/tweet',data, config)\n        //     .then(response => {\n        //         console.log(\"Status Code : \",response.status);\n        //         //console.log(\"type\",typeof(response.data));\n        //         if(response.status === 200){\n        //             console.log(\"tweet successfully!\");\n        //         }\n        // })\n\n        this.props.actions.tweet(data, config, (status, result) => {\n          if (status === 'SUCCESS') {\n            console.log(\"tweet successfully!\");\n          } else {\n            console.log(\"tweet failed!\");\n          }\n        });\n    }\n\n    clear() {\n        this.setState({\n            files: [],\n            imagesPreviewUrls: [],\n            image: [],\n        });\n    }\n\n\n    _handleImageChange = e =>{\n        e.preventDefault();\n\n\n        //console.log(\"hanle iamge ---------\", e.target.files[0], typeof(e.target.files));\n        // this.setState({\n        //     image: [...this.state.image, e.target.files[0]]\n        // });\n        // this.setState({\n        //     image: e.target.files\n        // });\n        // FileList to Array\n        let files = Array.from(e.target.files);\n        \n        // File Reader for Each file and and update state arrays\n        let newimages = [];\n        files.forEach((file, i) => {\n            newimages.push(file);\n            let reader = new FileReader();\n\n            reader.onloadend = () => {\n                this.setState(prevState => ({\n                    files: [...prevState.files, file[0]],\n                    imagesPreviewUrls: [...prevState.imagesPreviewUrls, reader.result]\n                }));\n            }\n\n            reader.readAsDataURL(file);\n        });\n\n        this.setState({\n            image: [...this.state.image, ...newimages]\n        });\n    }\n\n    render() {\n        let {imagesPreviewUrls} = this.state;\n        //console.log(\"files----------\", this.state.content);\n        return (\n            <div>\n                <textarea rows=\"4\" cols=\"60\" placeholder=\"What's happening?\" onChange={e=>this.setState({content:e.target.value})} required></textarea>\n\n                <br/>\n\n                {imagesPreviewUrls.map(function(imagePreviewUrl, i){\n                    return (<span>\n                            <img key={i} src={imagePreviewUrl} width=\"100\" height=\"100\" />\n                            {/* <button onClick={(i) => this.onClick}>x</button> */}\n                            </span>\n                            )\n                })}\n                {this.state.imagePreviewUrls != [] && <button type=\"submit\" onClick={this.clear} >x</button>}\n                \n\n                <div class=\"image-upload\">\n                    <label for=\"file-input\">\n                        <img src={this.state.button_image} height=\"30\" width=\"30\"></img>\n                    </label>\n                    <input id=\"file-input\" name = \"myImage\" type=\"file\" onChange={this._handleImageChange} multiple/>\n                    <button class=\"btn btn-secondary button1\" type=\"submit\" onClick={this.onClick} >Tweet</button>\n                </div>\n                <br/>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n    };\n  }\n  \n  function mapDispatchToProps(dispatch) {\n    return {\n      actions: {\n        tweet: bindActionCreators(tweetActions.tweet, dispatch)\n      }\n    };\n  }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TweetComponent);\n\n\n\n// export default TweetComponent;"]},"metadata":{},"sourceType":"module"}